<?xml version="1.0"?>
<!--
   Copyright 2004-2005 The Apache Software Foundation or its licensors,
                       as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
 <properties>
  <title>First Hops</title>
 </properties>

 <body>
  <section name="First Hops">
   <p>
     This is a short hands-on introduction to Jackrabbit and the features
     of the JCR API. See the rest of the Jackrabbit web site and the
     <a href="http://jcp.org/aboutJava/communityprocess/final/jsr170/index.html">JCR specification</a>
     for more detailed information.
   </p>
   <p>
     You need to have Jackrabbit locally available to compile and run the
     examples on this page. See the <a href="building.html">Building Jackrabbit</a>
     section for instructions to download and build the Jackrabbit sources.
     The examples on this page expect that your classpath contains the
     <code>jackrabbit-1.0-SNAPSHOT.jar</code> generated into the
     <code>target</code> directory by <code>maven jar</code> and all the
     dependency jar files copied into the <code>target/lib</code> directory
     by <code>maven copy-deps</code>. Please check your classpath settings
     if you get a <code>ClassNotFoundException</code> when compiling the
     example classes.
   </p>
   <p>
    Note that this introduction is meant to be as short and simple as
    possible, rather than usable as a real application. Thus the example
    classes should not be interpreted as the best practice.
   </p>

  <subsection name="Run Jackrabbit">
   <p>
    The first thing a JCR application needs to do is to get a
    <code>Repository</code> instance and start a <code>Session</code>
    for using the content repository. The first example application
    show below does little more than this, it just prints out the node
    type name of the root node to demonstrate that the session has indeed
    been opened. After that the application closes the session and exits.
   </p>
   <p><strong>FirstHop.java</strong></p>
<source>import javax.jcr.*;
import org.apache.jackrabbit.core.TransientRepository;

/**
 * <i>First Jackrabbit example application. Opens a content repository as</i>
 * <i>an anonymous user and prints the node type name of the root node of</i>
 * <i>the default workspace.</i>
 */
public class FirstHop {

    /** <i>The Jackrabbit configuration file</i> */
    private static final String CONFIG_FILE = "<b>repository.xml</b>";

    /** <i>The Jackrabbit repository directory</i> */
    private static final String DIRECTORY = "<b>repository</b>";

    /** <i>Runs the FirstHop example.</i> */
    public static void main(String[] args) {
        try {
            // <i>Set up a Jackrabbit repository with the specified</i>
            // <i>configuration file and repository directory</i>
            Repository repository =
                new TransientRepository(CONFIG_FILE, DIRECTORY);

            // <i>Login to the default workspace as a dummy user</i>
            Session session = repository.login(
                new SimpleCredentials("username", "password".toCharArray()));

            // <i>Print the node type name of the root node</i>
            Node root = session.getRootNode();
            System.out.println(root.getPrimaryNodeType().getName());

            // <i>Close the session</i>
            session.logout();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}</source>
   <p>
    The highlighted configuration parameters <code>CONFIG_FILE</code> and
    <code>DIRECTORY</code> specify the names of the repository configuration
    file and the repository directory. The repository configuration file
    is an XML file that specifies the components and options used by the
    Jackrabbit content repository. Below is an example configuration that
    you can use as the <code>repository.xml</code> file in your working
    directory.
   </p>
   <p><strong>repository.xml</strong></p>
<source><![CDATA[<?xml version="1.0"?>
<Repository>
    <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
        <param name="path" value="${rep.home}/repository"/>
    </FileSystem>
    <Security appName="Jackrabbit">
        <AccessManager class="org.apache.jackrabbit.core.security.SimpleAccessManager"/>
    </Security>
    <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default" />
    <Workspace name="${wsp.name}">
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${wsp.home}"/>
        </FileSystem>
        <PersistenceManager class="org.apache.jackrabbit.core.state.xml.XMLPersistenceManager" />
        <SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
            <param name="path" value="${wsp.home}/index"/>
        </SearchIndex>
    </Workspace>
    <Versioning rootPath="${rep.home}/versions">
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/versions"/>
        </FileSystem>
        <PersistenceManager class="org.apache.jackrabbit.core.state.xml.XMLPersistenceManager" />
    </Versioning>
</Repository>]]></source>
   <p>
    The keyword <code>${rep.home}</code> refers to the repository home
    directory, which is used as the root directory for all of the
    information that the repository persists. At runtime the keyword is
    replaced by the repository home directory path given to the Jackrabbit
    instance (in this case using the <code>DIRECTORY</code> parameter).
    The repository home directory needs to exists but it can be empty;
    after the first repository startup, the repository will automatically
    be filled with a file structure similar to this:
   </p>
<source>repository/
   meta/
   namespaces/
   nodetypes/
   versions/

tx/

workspaces/
   default/
      workspace.xml
      blobs/
      data/
      index/</source>
   <p>
     In addition to the repository configuration file, you also need to
     create a
     <a href="http://java.sun.com/security/jaas/doc/api.html">JAAS configuration</a>
     file used for Jackrabbit login settings. The contents of a simple
     configuration file named <code>jaas.config</code> is shown below.
   </p>
   <p><strong>jaas.config</strong></p>
<source>Jackrabbit {
org.apache.jackrabbit.core.security.SimpleLoginModule required;
};</source>
   <p>
    You need to include the JAAS configuration option
    <code>-Djava.security.auth.login.config==jaas.config</code> to the
    <code>java</code> command when running the example code to activate
    the authentication settings. The SimpleLoginModule accepts any
    username/password combination, so the hardcoded values will do just fine.
   </p>
   <p>
     If you want, you can also add
     <a href="http://logging.apache.org/log4j/">log4j</a> configuration
     if you are interested in the internal log messages produced by Jackrabbit.
   </p>
   <p>
    You should now have the files <code>FirstHop.java</code>,
    <code>repository.xml</code>, <code>jaas.config</code>, and the subdirectory
    <code>repository</code> available in your working directory. You should
    also have the Java classpath configured according to the instructions
    at the beginning of this page. Once all is ready, you can compile and
    run the <code>FirstHop</code> application, which should produce the
    following output (in addition to possible logging messages):
   </p>
<source>rep:root</source>
  </subsection>

  <subsection name="Adding Content">
   <p>
    Since an empty repository is not very useful, lets add some content to
    it. The following example application uses the same setup code as the
    already seen FirstHop class, but this one then goes to add a new
    content node to the repository. The new code is highlighted.
   </p>
   <p><strong>SecondHop.java</strong></p>
<source>import javax.jcr.*;
import org.apache.jackrabbit.core.TransientRepository;

/**
 * <i>Second Jackrabbit example application. Creates a test node with</i>
 * <i>a greeting message as a property and prints the saved content.</i>
 */
public class SecondHop {

    /** <i>The Jackrabbit configuration file</i> */
    private static final String CONFIG_FILE = "repository.xml";

    /** <i>The Jackrabbit repository directory</i> */
    private static final String DIRECTORY = "repository";

    /** <i>Runs the SecondHop example.</i> */
    public static void main(String[] args) {
        try {
            // <i>Set up a Jackrabbit repository with the specified</i>
            // <i>configuration file and repository directory</i>
            Repository repository =
                new TransientRepository(CONFIG_FILE, DIRECTORY);

            // <i>Login to the default workspace as a dummy user</i>
            Session session = repository.login(
                new SimpleCredentials("username", "password".toCharArray()));
<b>
            // <i>Use the root node as a starting point</i>
            Node root = session.getRootNode();

            // <i>Create a test node unless it already exists</i>
            if (!root.hasNode("testnode")) {
                System.out.print("Creating testnode... ");
                // <i>Create an unstructured node called "testnode"</i>
                Node node = root.addNode("testnode", "nt:unstructured");
                // <i>Add a string property called "testprop"</i>
                node.setProperty("testprop", "Hello, World!");
                // <i>Save the changes to the repository</i>
                session.save();
                System.out.println("done.");
            }

            // <i>Use the property path to get and print the added property</i>
            Property property = root.getProperty("testnode/testprop");
            System.out.println(property.getString());
</b>
            // <i>Close the session</i>
            session.logout();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}</source>
   <p>
    Compiling and running this class should produce the following output
    when started for the first time. On subsequent runs the application
    should only print "Hello, World!".
   </p>
<source>Creating testnode... done.
Hello, World!</source>
  </subsection>

  <subsection name="Importing content">
   <p>
    To add content a bit more efficiently, you may want to try
    JCR's import facilities, such as <code>Session.importXML</code>.
    The following <a href="http://www.cafeconleche.org/slides/xmlone/london2002/namespaces/10.html">XML document by Elliotte Rusty Harold</a>
    provides an interesting example that demonstrates a repository's
    namespace capabilities:
   </p>
   <p><strong>test.xml</strong></p>
<!--  Copyright 2001, 2002 Elliotte Rusty Harold -->
<source><![CDATA[<xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml"
            xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <xhtml:head><xhtml:title>Three Namespaces</xhtml:title></xhtml:head>
  <xhtml:body>
    <xhtml:h1 align="center">An Ellipse and a Rectangle</xhtml:h1>
    <svg:svg xmlns:svg="http://www.w3.org/2000/svg" 
             width="12cm" height="10cm">
      <svg:ellipse rx="110" ry="130" />
      <svg:rect x="4cm" y="1cm" width="3cm" height="6cm" />
    </svg:svg>
    <xhtml:p>The equation for ellipses</xhtml:p>
<mathml:math>
  <mathml:apply>
    <mathml:eq/>
    <mathml:cn> 1 </mathml:cn>
    <mathml:apply>
      <mathml:plus/>
      <mathml:apply>
        <mathml:divide/>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> x </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> a </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
      </mathml:apply>
      <mathml:apply>
        <mathml:divide/>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> y </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> b </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>        
      </mathml:apply>
    </mathml:apply>
 </mathml:apply>
</mathml:math>
    <xhtml:hr/>
    <xhtml:p>Last Modified January 10, 2002</xhtml:p>    
  </xhtml:body>
</xhtml:html>]]></source>
   <p>
    The third example application shown below will import the XML file called
    <code>test.xml</code> from the current directory into a new content
    repository node called <code>importxml</code>. Once the XML content is
    imported, the application recursively dumps the contents of the entire
    workspace using the simple <code>dump()</code> method.
   </p>
   <p><strong>ThirdHop.java</strong></p>
<source>import javax.jcr.*;
import org.apache.jackrabbit.core.TransientRepository;
import java.io.FileInputStream;

/**
 * <i>Third Jackrabbit example application. Imports an example XML file</i>
 * <i>and outputs the contents of the entire workspace.</i>
 */
public class ThirdHop {

    /** <i>The Jackrabbit configuration file</i> */
    private static final String CONFIG_FILE = "repository.xml";

    /** <i>The Jackrabbit repository directory</i> */
    private static final String DIRECTORY = "repository";

    /** <i>Runs the ThirdHop example.</i> */
    public static void main(String[] args) {
        try {
            // <i>Set up a Jackrabbit repository with the specified</i>
            // <i>configuration file and repository directory</i>
            Repository repository =
                new TransientRepository(CONFIG_FILE, DIRECTORY);

            // <i>Login to the default workspace as a dummy user</i>
            Session session = repository.login(
                new SimpleCredentials("username", "password".toCharArray()));

            // <i>Use the root node as a starting point</i>
            Node root = session.getRootNode();
<b>
            // <i>Import the XML file unless already imported</i>
            if (!root.hasNode("importxml")) {
                System.out.print("Importing xml... ");
                // <i>Create an unstructured node under which to import the XML</i>
                Node node = root.addNode("importxml", "nt:unstructured");
                // <i>Import the file "test.xml" under the created node</i>
                FileInputStream xml = new FileInputStream("<b>test.xml</b>");
                session.importXML(
                    "/importxml", xml, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
                xml.close();
                // <i>Save the changes to the repository</i>
                session.save();
                System.out.println("done.");
            }

            dump(root);
</b>
            // <i>Close the session</i>
            session.logout();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
<b>
    /** <i>Recursively outputs the contents of the given node.</i> */
    private static void dump(Node node) throws RepositoryException {
        // <i>First output the node path</i>
        System.out.println(node.getPath());
        // <i>Skip the virtual (and large!) jcr:system subtree</i>
        if (node.getName().equals("jcr:system")) {
            return;
        }

        // <i>Then output the properties</i>
        PropertyIterator properties = node.getProperties();
        while (properties.hasNext()) {
            Property property = properties.nextProperty();
            if (property.getDefinition().isMultiple()) {
                // <i>A multi-valued property, print all values</i>
                Value[] values = property.getValues();
                for (int i = 0; i &lt; values.length; i++) {
                    System.out.println(
                        property.getPath() + " = " + values[i].getString());
                }
            } else {
                // <i>A single-valued property</i>
                System.out.println(
                    property.getPath() + " = " + property.getString());
            }
        }

        // <i>Finally output all the child nodes recursively</i>
        NodeIterator nodes = node.getNodes();
        while (nodes.hasNext()) {
            dump(nodes.nextNode());
        }
    }
</b>
}</source>
    <p>
      Running the ThirdHop class should produce output like the following:
    </p>
<source>Importing XML... done.
/
/jcr:primaryType=rep:root
/jcr:system
/testnode
/testnode/jcr:primaryType=nt:unstructured
/testnode/testprop=Hello, World.
/importxml
/importxml/jcr:primaryType=nt:unstructured
/importxml/xhtml:html
/importxml/xhtml:html/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head
/importxml/xhtml:html/xhtml:head/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext/jcr:xmlcharacters=Three Namespaces
/importxml/xhtml:html/xhtml:body
/importxml/xhtml:html/xhtml:body/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1/align=center
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext/jcr:xmlcharacters=An Ellipse and a Rectangle
/importxml/xhtml:html/xhtml:body/svg:svg
/importxml/xhtml:html/xhtml:body/svg:svg/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/svg:svg/width=12cm
/importxml/xhtml:html/xhtml:body/svg:svg/height=10cm
.
.
.</source>
  </subsection>
  </section>
 </body>
</document>
