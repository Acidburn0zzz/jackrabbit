<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  The ASF licenses this file to You
   under the Apache License, Version 2.0 (the "License"); you may not
   use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
  <properties>
    <title>JCR application HOWTO</title>
  </properties>
  <body>
    <section name="JCR client application HOWTO">
      <p>
        This document describes the common configuration and initialization
        code of a client application that uses a JCR content repository. The
        application setup does not depend on the underlying deployment model,
        implementation, or configuration of the content repository.
      </p>
      <p>
        The instructions in this document apply to a J2EE web application
        that uses JNDI to access the content repository. It should however
        be easy to modify the instructions for other container environments.
      </p>
    </section>
    <section name="J2EE web application instructions">
      <p>
        Follow the steps below to access a JNDI-bound content repository
        within a J2EE web application. Example code is included after
        this overview. See the deployment model howtos for instructions on
        how to create the JNDI bindings for the standard deployment models.
      </p>
      <ol>
        <li>
          Place the JCR API jar in the <code>WEB-INF/lib</code> subdirectory
          of your web application.
        </li>
        <li>
          Declare the JNDI address under which you will request the
          repository instance in the deployment descriptor.
        </li>
        <li>
          Code your application to use the resource.
        </li>
      </ol>
      <p>
        Note that that none of your code or configuration needs to depend
        on the underlying repository implementation or deployment model.
        All those details are handled by the container and can easily be
        changed without modifying your application. Just make sure that
        you have documented the JCR repository level and optional features
        your application requires so that your application can be deployed
        in an appropriate environment.
      </p>
      <subsection name="Step 2 - Deployment descriptor">
        <p>
          Add the following snippet in your <code>web.xml</code>
          deployment descriptor to declare your application's use of
          a content repository resource.
        </p>
        <source><![CDATA[
<resource-env-ref>
  <description>Content Repository</description>
  <resource-env-ref-name>jcr/repository</resource-env-ref-name>
  <resource-env-ref-type>javax.jcr.Repository</resource-env-ref-type>
</resource-env-ref>
]]></source>
        <p>
          Note that the <code>java:comp/env/jcr</code> subcontext
          is the preferred naming context for JCR content repository
          resources.
        </p>
      </subsection>
      <subsection name="Step 3 - Java code">
        <p>
          Use the following Java code snippet to get a reference to the
          configured content repository instance.
        </p>
        <source><![CDATA[
InitialContext context = new InitialContext();
Context environment = (Context) context.lookup("java:comp/env");
Repository repository = (Repository) environment.lookup("jcr/repository");
]]></source>
      </subsection>
    </section>
  </body>
</document>
