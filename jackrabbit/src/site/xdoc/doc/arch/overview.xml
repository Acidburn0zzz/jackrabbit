<?xml version="1.0"?>
<!--
   Copyright 2004-2005 The Apache Software Foundation or its licensors,
                       as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
 <properties>
  <title>Jackrabbit Architecture Overview</title>
 </properties>
 <body>

<section name="General Architecture Overview">
<p>
The general architecture of Jackrabbit can be described in three Layers:
A Content Application Layer, an API Layer and a Content Repository 
Implementation Layer.<br />
<img src="../../images/arch/overview.png"/>
</p>
</section>

<section name="Content Applications">
<p>
Content Applications interact through the JSR-170 API with the Content Repository Implementation.
There are numerous applications that are available for JSR-170 repositories, some of them are very 
generic (like a WebDAV server) other applications can be very specific and make 
use of the content repository as a store for the information that is used by 
the applications.
Java Applications can use a JSR-170 content repository as a replacement 
for anything from property-files, XML-configuration, certain portions of 
relational database functionality to straight file system or 
blob-management. Using a content repository allows an application 
to deal with an arbitrarily large hierarchical space in a 
scalable manner automatically profiting from the repository services such as 
versioning, query, transactions or namespaces which make a content 
repository an ideal data store for many applications.
</p>
<p>
A "Generic Content Application" (an application that has no particular 
functional focus but just allows for generic introspection and manipulation 
of the repository) uses the capabilities of the node types, access control 
and other facilities to display a user interface or a network protocol 
to the end user, seemingly independent from the content that is stored 
in the repository. Examples of such generic applications are 
"The Content Explorer", "WebDAV Server" or a "Subversion Server". (Or 
generic Portal, CMS or DMS applications).
</p>
<p>
A "Specialized Content Application" operates under the assumption that there 
are certain node types that it operates on, and that it is familiar at least 
partially with the data model exposed by defined node types. Mostly these node 
types are defined by the application itself and ship with the application.
These applications use a content repository as their persistence layer as a 
natural evolution from the use of an RDBMS or a file system.
Examples of "Specialized Content Applications" have a very wide range from 
a "DVD Collection Management", to a "Message Board", to "Workflow and BPM" 
but also possibly complete next generation "Enterprise Resource Planning 
Systems".
</p>
</section>

<section name="Content Repository API">
<p>
The Content Repository API Layer is split into two major sections.
<ul>
<li><a href="overview/jcrlevels.html">The Content Repository API defined by JSR-170</a></li>
<li>A number features of a content repository, that have been removed from the JSR-170 specification since they are difficult to implement on existing non-java-based content repositories and administrational Repository tasks that have also been deliberately excluded from JSR-170</li>
</ul>
</p>
<p>
There are only very few (mostly administrational) applications which make use of the non-JSR-170 APIs provided by Jackrabbit.
</p>
<p>
The boxes in the architecture chart do not symbolize package names or class names directly but mostly semantically grouped blocks of functionality.
</p>
</section>

<section name="Content Repository Implementation">
<p>
The content Repository Implementation portion of the architecture chart reflects the major building blocks of the jackrabbit content repository implementation.
</p>
<p>
The size of the blocks symbolizes roughly the amount of code and therefore the complexity of the individual functional block. Again the functional blocks do not directly map to package or class names.
</p>
<p>
There are three scopes in a content repository: A repository scope, a workspace scope and a session scope.
</p>
<p>
Every function that is operated against a repository can be attributed to at least one of these scopes, some functions can operate on more than one scope.
<ul>
<li>Repository</li>
<li>Nodetype</li>
<li>Version</li>
<li>NamspaceRegistry</li>
<li>Workspace</li>
<li>Query</li>
<li>Observation</li>
<li>State</li>
<li>Xml</li>
<li>Session</li>
<li>Path</li>
<li>HierarchyManager</li>
<li>QName</li>
<li>ItemImpl, PropertyImpl, NodeImpl</li>
<li>ItemId, PropertyId, NodeId</li>
<li>ItemManager</li>
</ul>
This is not a complete list but includes some of the most important component of the content repository implementation.
</p>
</section>

</body>
</document>
