<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  The ASF licenses this file to You
   under the Apache License, Version 2.0 (the "License"); you may not
   use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
 <properties>
  <title>Core operations: Startup, Initialize and Configuration</title>
 </properties>
 <body>

<section name="Core Content Repository Operations: Startup, Initialize and Configuration">
<p>
The lifecycle of any Jackrabbit Content Repository starts with a call to one of 
the <code>RepositoryFactory.create()</code> methods passing optionally the source 
of a repository configuration file (which by convention is called <code>config.xml</code>) 
and the RepositoryFactoryHome, which points to a directory from which the 
Repository will continue reading further information for start-up and in 
many cases will store the actual data that is persisted in the repository and 
its workspaces.
</p>
<p>
Not supplying the <code>RepositoryFactoryHome</code> will default to the 
users home dir from the System property <code>user.dir</code>.
</p>
<p>
Not supplying the configuration file parameter will default to the value of 
<code>Repository.factory.config</code> System Property and if that is not set 
it will default to the <code>config.xml</code> in the 
<code>RepositoryFactoryHome</code>.
</p>
<p>
Calling the <code>create()</code> method will instantiate the 
<code>RepositoryFactory</code> singleton that will then, through the 
<code>getRepository(String name)</code> method, serve as the factory for 
Repository instances.
</p>
<p>
As per the <code>config.xml</code> a repository are started up with the 
respectively configured <code>RepositoryStore</code>, the <code>RepositoryStore</code> 
defines where the repository stores information that is visible for the entire 
Repository which includes things like the uuid of the root node, repository 
properties, the namespace registry, node type definitions or the version 
backing store in a file structure as follows.
</p>
<p>
<source>
./meta:
rep.properties
rootUUID

./namespaces:
ns_reg.properties

./nodetypes:
custom_nodetypes.xml

./versions:
</source>
</p>
<p>
The RepositoryStore normally points to a regular (i.e. local) file system but is abstracted through an abstract FileSystem that can be configured to point to a different FileSystem implementation, in case the above information should be stored in a different data container.
</p>
<p>
... to be continued ...
</p>
</section>
</body>
</document>
