<?xml version="1.0"?>
<!--
   Copyright 2004-2005 The Apache Software Foundation or its licensors,
                       as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
  <properties>
    <title>First Hops</title>
  </properties>
  <body>
    <section name="First Hops with Jackrabbit">
      <p>
        Welcome to your first hops into the world of Jackrabbit! This
        introduction gives you a hands-on experience with Jackrabbit and
        the JCR API. Once you have finished hopping through this document,
        you should be all set to continue on your own with the official
        <a href="http://jcp.org/aboutJava/communityprocess/final/jsr170/index.html"
           class="externalLink"
           title="JSR-170: Content Repository for Java(TM) technology API"
           >JCR specification</a> and the
        <a href="index.html">documentation</a> on this site.
      </p>

      <subsection name="Hop 0: Getting started">
        <p>
          Before you can start using Jackrabbit, you need to have it installed
          on your computer. You can do this either by downloading a
          <a href="../downloads.html">binary release</a> and all the required
          <a href="../dependencies.html">dependencies</a> or by building
          <a href="building.html">the Jackrabbit sources</a>.
        </p>
        <p>
          Once you have Jackrabbit available locally, you should make sure
          that you have at least version 1.4 of the
          <a href="http://java.sun.com/j2se/" class="externalLink"
             >Java 2 Platform, Standard Edition</a> (J2SE) installed and the
          following libraries configured in your Java classpath:
        </p>
        <dl>
          <dt>
            <code>jackrabbit-1.0.jar</code> or
            <code>jackrabbit-1.0-SNAPSHOT.jar</code>
          </dt>
          <dd>
            depending on whether you use a binary release or a locally
            compiled version,
          </dd>

          <dt><code>jcr-1.0.jar</code></dt>
          <dd>for the JCR 1.0 API,</dd>

          <dt>
            <code>slf4j-log4j12-1.0.jar</code> and
            <code>log4j-1.2.8.jar</code>
          </dt>
          <dd>
            for logging using
            <a href="http://www.slf4j.org/" class="externalLink"
               title="Simple Logging Facade for Java">SLF4J</a> with
            <a href="http://logging.apache.org/log4j/" class="externalLink"
               >Log4J</a> (you should be fine with any Log4J 1.2.x version,
            or you could even replace both of these jars with another SLF4J
            implementation),
          </dd>

          <dt><code>commons-collections-3.1.jar</code></dt>
          <dd>for advanced data structures used by Jackrabbit,</dd>

          <dt>
            <code>xercesImpl-2.6.2.jar</code> and
            <code>xmlParserApis-2.0.2.jar</code>
          </dt>
          <dd>
            for advanced XML support (you should be fine with any recent
            <a href="http://xerces.apache.org/xerces2-j/"
               class="externalLink">Xerces2 Java Parser</a> implementation
            and the extra XML API library is only needed for JDK 1.4),
          </dd>

          <dt><code>derby-10.1.1.0.jar</code></dt>
          <dd>
            or any recent
            <a href="http://db.apache.org/derby/" class="externalLink"
               >Derby</a> release for embedded database storage,
          </dd>

          <dt><code>concurrent-1.3.4.jar</code></dt>
          <dd>for advanced thread synchronization, and</dd>

          <dt><code>lucene-1.4.3.jar</code></dt>
          <dd>for full text indexing and searching.</dd>
        </dl>
        <p>
          You should also add the current directory in your classpath to make
          it easy to compile and run the example classes. You may also want
          to copy the following
          <a href="hops/log4j.properties">log4j.properties</a> file to the
          current directory to avoid warnings of missing log configuration.
          If you want to see the internal Jackrabbit log, just change the
          log level to <code>INFO</code> or even <code>DEBUG</code>.
        </p>
<source>log4j.logger.org.apache.jackrabbit=WARN,stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout
</source>
        <p>
          HINT: If you have build Jackrabbit from sources with
          <a href="http://maven.apache.org/maven-1.x/" class="externalLink"
             >Maven 1.x</a>, then you can get all the dependencies copied
          to <code>target/lib</code> by running <code>maven copy-deps</code>
          in the Jackrabbit project directory.
        </p>
        <p>
          HINT: You probably have an error in your classpath if you get a
          <code>ClassNotFoundException</code> message when trying to compile
          or run the examples below.
        </p>
      </subsection>

      <subsection name="Hop 1: Logging in to Jackrabbit">
        <p>
          Once you are done with the setup tasks, we can start doing some
          real work. As a warm-up we'll create a Jackrabbit content
          repository and start a login session for accessing it. The full
          example application that does this is shown below, with line-by-line
          explanations following shortly after.
        </p>
        <p><strong>FirstHop.java</strong></p>
<source><strong>import</strong> javax.jcr.Repository;
<strong>import</strong> javax.jcr.Session;
<strong>import</strong> org.apache.jackrabbit.core.TransientRepository;

/**
 * <em>First hop example. Logs in to a content repository and prints a</em>
 * <em>status message.</em>
 */
<strong>public class</strong> FirstHop {

    /**
     * <em>The main entry point of the example application.</em>
     *
     * @param args <em>command line arguments (ignored)</em>
     * @throws Exception <em>if an error occurs</em>
     */
    <strong>public static void</strong> main(String[] args) <strong>throws</strong> Exception {
        Repository repository = new TransientRepository();
        Session session = repository.login();
        <strong>try</strong> {
            String user = session.getUserID();
            String name = repository.getDescriptor(Repository.REP_NAME_DESC);
            System.out.println(
                    "<em>Logged in as </em>" + user + "<em> to a </em>" + name + "<em> repository.</em>");
        } <strong>finally</strong> {
            session.logout();
        }
    }

}
</source>
        <p>
          You can also download the source file as
          <a href="hops/FirstHop.java">FirstHop.java</a>. If you have your
          classpath set up, you can compile the application with
          <code>javac FirstHop.java</code> and run it with
          <code>java FirstHop</code> to get the following output.
        </p>
        <source>Logged in as anonymous to a Jackrabbit repository.</source>
        <p>
          In addition to producing the above status line the application
          copies a default repository configuration file to
          <code>repository.xml</code> and creates an initial Jackrabbit
          content repository in the <code>repository</code> subdirectory.
          You can use the system properties
          <code>org.apache.jackrabbit.repository.conf</code> and
          <code>org.apache.jackrabbit.repository.home</code> to set alternative
          configuration file and repository directory locations.
        </p>
        <p>
          Read on for a detailed breakdown of the FirstHop application:
        </p>
        <dl>
          <dt><code><strong>import</strong> javax.jcr.Repository;</code></dt>
          <dt><code><strong>import</strong> javax.jcr.Session;</code></dt>
          <dd>
            <p>
              The JCR API interfaces are located in the <code>javax.jcr</code>
              package found in the <code>jcr-1.0.jar</code> library. The
              promise of the JCR API is that if you only use these interfaces
              in your content application, it should remain mostly independent
              of the underlying content repository implementation.
            </p>
            <p>
              The
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Repository.html"
                 class="externalLink" title="javax.jcr.Repository"
                 >Repository</a> interface represents a given content repository
              instance and the
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Session.html"
                 class="externalLink" title="javax.jcr.Session"
                 >Session</a> interface represents a single login session for
              accessing the repository. A session is needed to access any
              content within a repository.
            </p>
            <p>
              Note that a Session instance is not guaranteed to be thread-safe
              so you should start multiple sessions if you need to access
              repository content simultaneously from different threads. This
              is especially important for things like web applications.
            </p>
          </dd>
          
          <dt><code><strong>import</strong> org.apache.jackrabbit.core.TransientRepository;</code></dt>
          <dd>
            <p>
              The best practice for deploying Jackrabbit is to use
              <a href="http://java.sun.com/products/jndi/" class="externalLink"
                 title="Java Naming and Directory Interface">JNDI</a> or some
              other configuration mechanism in a container environment to keep
              the application code free of direct Jackrabbit dependencies, but
              since we are creating a simple standalone application we can take
              a shortcut by using the
              <a href="../apidocs/org/apache/jackrabbit/core/TransientRepository.html"
                 title="org.apache.jackrabbit.core.TransientRepository"
                 >TransientRepository</a> class from Jackrabbit core.
            </p>
          </dd>

          <dt><code><strong>public class</strong> FirstHop</code></dt>
          <dt><code><strong>public static void</strong> main(String[] args) <strong>throws</strong> Exception</code></dt>
          <dd>
            <p>
              The FirstHop example is a simple standalone application that fits
              nicely in the main() method and lets the JVM take care of the
              possible exceptions. More substantial content applications could
              also be written as web application or EJB components with
              different setup and error handling patterns.
            </p>
          </dd>

          <dt><code>Repository repository = new TransientRepository();</code></dt>
          <dd>
            <p>
              The
              <a href="../apidocs/org/apache/jackrabbit/core/TransientRepository.html"
                 title="org.apache.jackrabbit.core.TransientRepository"
                 >TransientRepository</a> class implements the JCR
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Repository.html"
                 class="externalLink" title="javax.jcr.Repository"
                 >Repository</a> interface, so you can simply assign a
              TransientRepository instance to a Repository variable.
              The
              <a href="../apidocs/org/apache/jackrabbit/core/TransientRepository.html#TransientRepository()"
                 title="TransientRepository()">default constructor</a>
              contains a utility feature that will take care of the initial
              configuration and repository construction when the first session
              is started. Thus there is no need for
              <a href="config.html">manual configuration</a> for now unless
              you want direct control over the repository setup.
            </p>
            <p>
              The TransientRepository implementation will automatically
              initialize the content repository when the first session is
              started and shut it down when the last session is closed. Thus
              there is no need for explicit repository shutdown as long as
              all sessions are properly closed. Note that a Jackrabbit
              repository directory contains a lock file that prevents it from
              being accessed simultaneously by multiple processes. You will
              see repository startup exceptions caused by the lock file if you
              fail to properly close all sessions or otherwise shut down the
              repository before leaving the process that accesses a repository.
              Normally you can just manually remove the lock file in such cases
              but such cases always present a chance of repository corruption
              especially if you use a non-transactional persistence manager.
            </p>
          </dd>

          <dt><code>Session session = repository.login();</code></dt>
          <dd>
            <p>
              The default
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Repository.html#login()"
                 class="externalLink">Repository.login()</a> method starts
              a repository session using the default workspace and no user
              credentials. Jackrabbit tries to use
              <a href="http://java.sun.com/products/jaas/"
                 class="externalLink"
                 title="Java Authentication and Authorization Service"
                 >JAAS</a> authentication in such cases, but defaults to the
              anonymous user if a JAAS Subject is not found.
            </p>
            <p>
              Since we use the TransientRepository class as the Repository
              implementation, this step will also cause the repository
              to be initialized.
            </p>
          </dd>

          <dt><code><strong>try</strong> { ... } <strong>finally</strong> { session.logout(); }</code></dt>
          <dd>
            <p>
              It is a good practice to properly release all acquired resources,
              and the JCR sessions are no exception. The try-finally idiom is
              a good way to ensure that a resource really gets released, as
              the release method gets called even if the intervening code
              throws an exception or otherwise jumps outside the scope (for
              example using a <code>return</code>, <code>break</code>, or
              <code>continue</code> statement).
            </p>
            <p>
              The
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Session.html#logout()"
                 class="externalLink">Session.logout()</a> method in the
              <code>finally</code> branch closes the session and since this
              is the only session we have started, the repository is gets
              automatically shut down.
            </p>
          </dd>

          <dt><code>String user = session.getUserID();</code></dt>
          <dd>
            <p>
              The username or identifier of the user associated with a session
              is available using the
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Session.html#getUserID()"
                 class="externalLink">Session.getUserID()</a> method.
              Jackrabbit returns "anonymous" by default.
            </p>
          </dd>

          <dt><code>String name = repository.getDescriptor(Repository.REP_NAME_DESC);</code></dt>
          <dd>
            <p>
              Each content repository implementation publishes a number of
              string descriptors that describe the various implementation
              properties, like the implementation level and the supported
              optional JCR features. See the 
              <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Repository.html"
                 class="externalLink">Repository</a> interface for a list of
              the standard repository descriptors. The <code>REP_NAME_DESC</code>
              descriptor contains the name of the repository implementation,
              in this case "Jackrabbit".
            </p>
          </dd>
        </dl>
      </subsection>
      <subsection name="Hop 2: Adding content">
        <p>TODO: Update to match the FirstHop style.</p>
   <p>
    Since an empty repository is not very useful, lets add some content to
    it. The following example application uses the same setup code as the
    already seen FirstHop class, but this one then goes to add a new
    content node to the repository. The new code is highlighted.
   </p>
   <p><strong>SecondHop.java</strong></p>
<source>import javax.jcr.*;
import org.apache.jackrabbit.core.TransientRepository;

/**
 * <i>Second Jackrabbit example application. Creates a test node with</i>
 * <i>a greeting message as a property and prints the saved content.</i>
 */
public class SecondHop {

    /** <i>Runs the SecondHop example.</i> */
    public static void main(String[] args) throws Exception {
        Repository repository = new TransientRepository();

        // <i>Login to the default workspace as a dummy user</i>
        Session session = repository.login(
            new SimpleCredentials("username", "password".toCharArray()));
        try {
            // <i>Use the root node as a starting point</i>
            Node root = session.getRootNode();

            // <i>Create a test node unless it already exists</i>
            if (!root.hasNode("testnode")) {
                System.out.print("Creating testnode... ");
                // <i>Create an unstructured node called "testnode"</i>
                Node node = root.addNode("testnode", "nt:unstructured");
                // <i>Add a string property called "testprop"</i>
                node.setProperty("testprop", "Hello, World!");
                // <i>Save the changes to the repository</i>
                session.save();
                System.out.println("done.");
           }

            // <i>Use the property path to get and print the added property</i>
            Property property = root.getProperty("testnode/testprop");
            System.out.println(property.getString());
        } finally {
            session.logout();
        }
    }

}
</source>
   <p>
    Compiling and running this class should produce the following output
    when started for the first time. On subsequent runs the application
    should only print "Hello, World!".
   </p>
<source>Creating testnode... done.
Hello, World!</source>
  </subsection>

  <subsection name="Hop 3: Importing content">
        <p>TODO: Update to match the FirstHop style.</p>
   <p>
    To add content a bit more efficiently, you may want to try
    JCR's import facilities, such as <code>Session.importXML</code>.
    The following <a href="http://www.cafeconleche.org/slides/xmlone/london2002/namespaces/10.html">XML document by Elliotte Rusty Harold</a>
    provides an interesting example that demonstrates a repository's
    namespace capabilities:
   </p>
   <p><strong>test.xml</strong></p>
<!--  Copyright 2001, 2002 Elliotte Rusty Harold -->
<source><![CDATA[<xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml"
            xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <xhtml:head><xhtml:title>Three Namespaces</xhtml:title></xhtml:head>
  <xhtml:body>
    <xhtml:h1 align="center">An Ellipse and a Rectangle</xhtml:h1>
    <svg:svg xmlns:svg="http://www.w3.org/2000/svg" 
             width="12cm" height="10cm">
      <svg:ellipse rx="110" ry="130" />
      <svg:rect x="4cm" y="1cm" width="3cm" height="6cm" />
    </svg:svg>
    <xhtml:p>The equation for ellipses</xhtml:p>
<mathml:math>
  <mathml:apply>
    <mathml:eq/>
    <mathml:cn> 1 </mathml:cn>
    <mathml:apply>
      <mathml:plus/>
      <mathml:apply>
        <mathml:divide/>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> x </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> a </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
      </mathml:apply>
      <mathml:apply>
        <mathml:divide/>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> y </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>
        <mathml:apply>
          <mathml:power/>
          <mathml:ci> b </mathml:ci>
          <mathml:cn> 2 </mathml:cn>
        </mathml:apply>        
      </mathml:apply>
    </mathml:apply>
 </mathml:apply>
</mathml:math>
    <xhtml:hr/>
    <xhtml:p>Last Modified January 10, 2002</xhtml:p>    
  </xhtml:body>
</xhtml:html>]]></source>
   <p>
    The third example application shown below will import the XML file called
    <code>test.xml</code> from the current directory into a new content
    repository node called <code>importxml</code>. Once the XML content is
    imported, the application recursively dumps the contents of the entire
    workspace using the simple <code>dump()</code> method.
   </p>
   <p><strong>ThirdHop.java</strong></p>
<source>import javax.jcr.*;
import org.apache.jackrabbit.core.TransientRepository;
import java.io.FileInputStream;

/**
 * <i>Third Jackrabbit example application. Imports an example XML file</i>
 * <i>and outputs the contents of the entire workspace.</i>
 */
public class ThirdHop {

    /** <i>Runs the ThirdHop example.</i> */
    public static void main(String[] args) throws Exception {
        // <i>Set up a Jackrabbit repository with the specified</i>
        // <i>configuration file and repository directory</i>
        Repository repository = new TransientRepository();

        // <i>Login to the default workspace as a dummy user</i>
        Session session = repository.login(
            new SimpleCredentials("username", "password".toCharArray()));
        try {
            // <i>Use the root node as a starting point</i>
            Node root = session.getRootNode();

            // <i>Import the XML file unless already imported</i>
            if (!root.hasNode("importxml")) {
                System.out.print("Importing xml... ");
                // <i>Create an unstructured node under which to import the XML</i>
                Node node = root.addNode("importxml", "nt:unstructured");
                // <i>Import the file "test.xml" under the created node</i>
                FileInputStream xml = new FileInputStream("<b>test.xml</b>");
                session.importXML(
                    "/importxml", xml, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
                xml.close();
                // <i>Save the changes to the repository</i>
                session.save();
                System.out.println("done.");
            }

            dump(root);
        } finally {
            session.logout();
        }
    }

    /** <i>Recursively outputs the contents of the given node.</i> */
    private static void dump(Node node) throws RepositoryException {
        // <i>First output the node path</i>
        System.out.println(node.getPath());
        // <i>Skip the virtual (and large!) jcr:system subtree</i>
        if (node.getName().equals("jcr:system")) {
            return;
        }

        // <i>Then output the properties</i>
        PropertyIterator properties = node.getProperties();
        while (properties.hasNext()) {
            Property property = properties.nextProperty();
            if (property.getDefinition().isMultiple()) {
                // <i>A multi-valued property, print all values</i>
                Value[] values = property.getValues();
                for (int i = 0; i &lt; values.length; i++) {
                    System.out.println(
                        property.getPath() + " = " + values[i].getString());
                }
            } else {
                // <i>A single-valued property</i>
                System.out.println(
                    property.getPath() + " = " + property.getString());
            }
        }

        // <i>Finally output all the child nodes recursively</i>
        NodeIterator nodes = node.getNodes();
        while (nodes.hasNext()) {
            dump(nodes.nextNode());
        }
    }

}
</source>
    <p>
      Running the ThirdHop class should produce output like the following:
    </p>
<source>Importing XML... done.
/
/jcr:primaryType=rep:root
/jcr:system
/testnode
/testnode/jcr:primaryType=nt:unstructured
/testnode/testprop=Hello, World.
/importxml
/importxml/jcr:primaryType=nt:unstructured
/importxml/xhtml:html
/importxml/xhtml:html/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head
/importxml/xhtml:html/xhtml:head/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:head/xhtml:title/jcr:xmltext/jcr:xmlcharacters=Three Namespaces
/importxml/xhtml:html/xhtml:body
/importxml/xhtml:html/xhtml:body/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1/align=center
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/xhtml:h1/jcr:xmltext/jcr:xmlcharacters=An Ellipse and a Rectangle
/importxml/xhtml:html/xhtml:body/svg:svg
/importxml/xhtml:html/xhtml:body/svg:svg/jcr:primaryType=nt:unstructured
/importxml/xhtml:html/xhtml:body/svg:svg/width=12cm
/importxml/xhtml:html/xhtml:body/svg:svg/height=10cm
.
.
.</source>
  </subsection>
  </section>
 </body>
</document>
