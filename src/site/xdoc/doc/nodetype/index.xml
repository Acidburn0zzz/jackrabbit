<?xml version="1.0"?>
<!--
   Copyright 2004-2005 The Apache Software Foundation or its licensors,
                       as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->
<document>
    <properties>
        <title>Node Types</title>
    </properties>
    <body>
        <section name="Node Types">
            <p>
                Each node in a Jackrabbit workspace tree has a node type that defines the
                child nodes and properties it may (or must) have. Developers can use node types to
                define a custom content model for their application domain and have
                Jackrabbit enforce the constraints of that model at the repository level.
            </p>
            <subsection name="Primary vs Mixin">
                <p>
                    There are two categories of node types, <b>primary</b> and <b>mixin</b>. Every node
                    has a primary node type assigned to it upon creation (see <code>Node.addNode</code>
                    in the JCR API). In addition, a mixin node type may be added to a node later in its
                    lifecycle (see <code>Node.addMixin</code>).
                </p>
                <p>
                    The primary node type of a node usually defines node structure (ie, allowed and required
                    child nodes and properties) related to the problem domain being modelled. For example,
                    a node used in storing content about business contacts might have the primary type
                    <code>myapp:Contact</code> which defines properties such as <code>myapp:givenName</code>,
                    <code>myappg:familyName</code> and so forth.
                </p>
                <p>
                    Mixin node types usually specify additional properties or child nodes related to
                    a capability being added to the node. These capabilities may include
                    generic repository-level functions as in the case of the built-in mixins
                    <code>mix:versionable</code> and <code>mix:lockable</code>, for example,
                    or domain-level capabilities such as a (hypothetical) <code>myapp:Emailable</code>
                    mixin type that adds the property <code>myapp:emailAddress</code> to a node.
                </p>
            </subsection>
            <subsection name="Inheritance">
                <p>
                    Primary node types are arranged in an inheritance hierarchy. Every primary node type must be the
                    subtype of at least one existing node type. The built-in node type
                    <code>nt:base</code>
                    serves as
                    the root of this hierarchy. Jackrabbit supports multiple inheritance of node types so node types
                    can have more than one supertype.
                </p>
                <p>
                    Mixin node types do not have to have supertypes.
                </p>
            </subsection>
        </section>
        <section name="Node Type Definition">
            <p>
                A node type definition has the following attributes:
            </p>
            <dl>
                <dt><strong>Name</strong></dt>
                <dd>
                    Every node type registered with the repository has a unique name. The naming conventions for node
                    types are the same as for items (i.e., they may have a colon delimited prefix).
                </dd>
                <dt><strong>Supertypes</strong></dt>
                <dd>
                    A primary node type (with the exception of <code>nt:base</code>) must extend another node type (and may extend
                    more than one node type). A mixin node type may extend another node type.
                </dd>
                <dt><strong>Mixin Status</strong></dt>
                <dd>
                    A node type may be either primary or mixin.
                </dd>
                <dt><strong>Orderable Child Nodes Status</strong></dt>
                <dd>
                    A primary node type may specify that child nodes are client-orderable. If this status is set to
                    true, then
                    <code>Node.orderBefore</code>
                    can be used to set the order of child nodes. Only primary
                    node types control a node's status in this regard. This setting on a mixin node type will not have
                    any effect on the node.
                </dd>
                <dt><strong>Property Definitions</strong></dt>
                <dd>
                    A node type contains a set of definitions specifying the properties that nodes of this node type are
                    allowed (or required) to have and the characteristics of those properties (see below).
                </dd>
                <dt><strong>Child Node Definitions</strong></dt>
                <dd>
                    A node type contains a set of definitions specifying the child nodes that nodes of this node type
                    are allowed (or required) to have and the characteristics of those child nodes (including, in turn,
                    <i>their</i>
                    node types, see below).
                </dd>
                <dt><strong>Primary Item Name</strong></dt>
                <dd>
                    A node type may specify one child item (property or node) by name as the primary item. This
                    indicator is used by the method <code>Node.getPrimaryItem()</code>.
                </dd>
            </dl>
            <subsection name="Property Definition">
                <p>
                    A property definition (within a node type definition) contains the the following information:
                </p>
                <dl>
                    <dt><strong>Name</strong></dt>
                    <dd>
                        The name of the property to which this definition applies, or '*' if this definition is
                        a "residual definition', meaning that it applies to any additional properties with any
                        names apart from those otherwise defined in this node type.
                    </dd>
                    <dt><strong>Required Type</strong></dt>
                    <dd>
                        The required type of the property. One of <code>STRING</code>, <code>BINARY</code>,
                        <code>LONG</code>,<code>DOUBLE</code>,<code>DATE</code>,<code>PATH</code>,
                        <code>NAME</code>,<code>REFERENCE</code> or <code>UNDEFINED</code>.
                        Specifying a type of <code>UNDEFINED</code> means that the property can be of any type.
                    </dd>
                    <dt><strong>Value Constraints</strong></dt>
                    <dd>
                        The value constraints on the property define the range of values that may be assigned
                        to this property.
                    </dd>
                    <dt><strong>Default Value</strong></dt>
                    <dd>
                        The value that the property will have if it is auto-created.
                    </dd>
                    <dt><strong>Auto-create Status</strong></dt>
                    <dd>
                        Whether this property will be auto-created when its parent node is created. Only properties
                        with a default value can be auto-created.
                    </dd>
                    <dt><strong>Mandatory Status</strong></dt>
                    <dd>
                        A mandatory property is one that must exist. If a node of a type that specifies a
                        mandatory property is created then any attempt to save that node without
                        adding the mandatory property will fail. Since single-value properties either have a value or
                        do not exist (there being no concept of the null value) this implies that a mandatory
                        single-value property must have a value. A mandatory multi-value property on the other hand
                        may have zero or more values.
                    </dd>
                    <dt><strong>On-Parent-Version Status</strong></dt>
                    <dd>
                        The onParentVersion status of specifies what happens to this property if a
                        new version of its parent node is created (ie, a checked-in is done on it).
                    </dd>
                    <dt><strong>Protected Status</strong></dt>
                    <dd>
                        A protected property is one which cannot be modified
                        (ie, have child nodes or properties added or removed) or removed from its parent through the JCR API.
                    </dd>
                    <dt><strong>Multiple Values Status</strong></dt>
                    <dd>
                        Whether this property can have multiple values, meaning that it stores an array of values,
                        not just one. Note that this "multiple values" flag is special in that a given node type
                        may have two property definitions that are identical in every respect except for the their
                        "multiple values" status. For example, a node type can specify two string properties both
                        called X, one of which is multi-valued and the other that is not. An example of such a
                        node type is nt:unstructured.
                    </dd>
                </dl>
            </subsection>
            <subsection name="Child Node Definition">
                <p>
                    A child node definition (within a node type definition) contains the the following information:
                </p>
                <dl>
                    <dt><strong>Name</strong></dt>
                    <dd>
                        The name of the child node to which this definition applies or '*' if this definition is
                        a "residual definition', meaning that it applies to any additional child nodes with any
                        names apart from those otherwise defined in this node type.
                    </dd>
                    <dt><strong>Required Primary Types</strong></dt>
                    <dd>
                        If it specifies only a single
                        node type N then the primary node type of this child node must be N or a subtype
                        of N. If this attribute specifies multiple node types N1, N2,..., Nm then the primary node
                        type of this child node must be a subtype of all the types N1, N2, ... Nm. Note that this
                        is possible because Jackrabbit supports multiple inheritance among node types and that each
                        node still has one and only one primary node type.
                    </dd>
                    <dt><strong>Default Primary Type</strong></dt>
                    <dd>
                        This is the primary node type automatically
                        assigned if no node type information is specified when the node is created.
                    </dd>
                    <dt><strong>Auto-create Status</strong></dt>
                    <dd>
                        Governs whether this child node will be auto-created when its parent node is created.
                    </dd>
                    <dt><strong>Mandatory Status</strong></dt>
                    <dd>
                        Governs whether the child node is mandatory. A mandatory child node is one that must exist. If a
                        mandatory child node is missing from a parent node then save on the parent node will fail.
                    </dd>
                    <dt><strong>On-Parent-Version Status</strong></dt>
                    <dd>
                        This specifies what to do with the child node if
                        its parent node is versioned.
                    </dd>
                    <dt><strong>Protected Status</strong></dt>
                    <dd>
                        This governs whether the child node is protected. A protected node is one which cannot be
                        modified (have child node or properties added to it or removed from it) or be removed from its
                        parent through the JCR API.
                    </dd>
                    <dt><strong>Same-Name Siblings Status</strong></dt>
                    <dd>
                        This governs whether this child node can have same-name siblings, meaning that the parent node
                        can have more than one child node of this name.
                    </dd>
                </dl>
            </subsection>
        </section>
        <section name="Registering Node Types">
            <p>
                Each Jackrabbit instance has a <code>NodeTypeRegistry</code> which is created on start-up
                and populated with the set of built-in node types (these include both those required by
                the JCR specification and others required by the Jackrabbit implementation).
            </p>
            <p>
                To register a new node type you must first create a <code>NodeTypeDef</code> object
                that defines it and then pass that object to the <code>NodeTypeRegistry</code>.
            </p>
            <p>
                The easiest way to create a <code>NodeTypeDef</code> object is to use the tools found in
                <code>contrib/compact-nt</code>.
            </p>
            <p>
                First you define your node types in a text file using the 
                <a href="cnd.html">"Compact Namespace and Node Type Definition" (CND) notation</a>,
                then read it into a <code>CompactNodeTypeDefReader</code>
                and then get the resulting <code>NodeTypeDef</code> objects and register each with the
                <code>NodeTypeRegistry</code>. The following code gives an example:
            </p>
<source><![CDATA[import javax.jcr.Workspace;
import org.apache.jackrabbit.core.nodetype.NodeTypeDef;
import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.compact.CompactNodeTypeDefReader;
import java.io.FileReader;
import java.util.List;
import java.util.Iterator

public class CustomNodeTypeExample {
    public static void RegisterCustomNodeTypes(Workspace ws, String cndFileName){

        // Read in the CND file
        FileReader fileReader = new FileReader(cndFileName);

        // Create a CompactNodeTypeDefReader
        CompactNodeTypeDefReader cndReader = new CompactNodeTypeDefReader(fileReader, cndFileName);

        // Get the List of NodeTypeDef objects
        List ntdList = cndReader.getNodeTypeDefs;

        // Get the NodeTypeManager from the Workspace.
        // Note that it must be cast from the generic JCR NodeTypeManager to the
        // Jackrabbit-specific implementation.
        NodeTypeManagerImpl ntmgr =(NodeTypeManagerImpl)ws.getNodeTypeManager();

        // Acquire the NodeTypeRegistry
        NodeTypeRegistry ntreg = ntmgr.getNodeTypeRegistry();

        // Loop through the prepared NodeTypeDefs
        for (Iterator i = ntdList.iterator(); i.hasNext();) {

            // Get the NodeTypeDef...
            NodeTypeDef ntd = (NodeTypeDef)i.next();

            // ...and register it
            ntreg.registerNodeType(ntd);
        }
    }
}]]></source>
            <br/>
            <a href="cnd.html"><strong>Continue to Node Type Notation</strong></a>
        </section>
    </body>
</document>
