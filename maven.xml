<!--
   Copyright 2004-2005 The Apache Software Foundation or its licensors,
                       as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project
    default="jar:jar"
    xmlns:deploy="deploy"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant">

    <postGoal name="ant:generate-build">
        <attainGoal name="jackrabbit:post-ant"/>
    </postGoal>

    <postGoal name="maven-javadoc-plugin:report">
        <attainGoal name="jackrabbit:post-javadoc"/>
    </postGoal>

    <!-- Goal strips the javadov generated datestamp -->
    <goal name="jackrabbit:post-javadoc">
        <ant:replaceregexp
            match="-- Generated by javadoc .*--"
            replace="-- Generated by javadoc --" flags="g" byline="true">
            <ant:fileset dir="${maven.javadoc.destdir}" includes="**/*.html">
                <ant:depth max="20"/>
            </ant:fileset>
        </ant:replaceregexp>
    </goal>

    <!-- Additionally cleans the test data created -->
    <postGoal name="clean">
        <attainGoal name="test:clean"/>
    </postGoal>

    <!-- deletes the test data -->
    <goal name="test:clean">
        <ant:delete includeEmptyDirs="true">
            <ant:fileset dir="applications/test/repository">
                <ant:include name="**/*"/>
                <ant:exclude name="**/custom_nodetypes.xml"/>
            </ant:fileset>
        </ant:delete>
        <ant:delete includeEmptyDirs="true">
            <ant:fileset dir="applications/test/workspaces">
                <ant:include name="**/*"/>
                <ant:exclude name="**/workspace.xml"/>
            </ant:fileset>
        </ant:delete>
        <ant:delete dir="applications/test/tx"/>
        <ant:delete dir="applications/test/version"/>
    </goal>

    <!-- Generates the SQL / XPath parsers if necessary -->
    <postGoal name="java:prepare-filesystem">
        <ant:condition property="sqlparser_stale">
            <ant:not>
                <ant:uptodate targetfile="src/java/org/apache/jackrabbit/core/query/sql/JCRSQLParser.java">
                    <ant:srcfiles dir="src/grammar/sql">
                        <ant:include name="JCRSQL.jjt"/>
                    </ant:srcfiles>
                </ant:uptodate>
            </ant:not>
        </ant:condition>
        <j:choose>
            <j:when test="${sqlparser_stale == 'true'}">
                <attainGoal name="jackrabbit:generate-sql-parser"/>
            </j:when>
            <j:otherwise>
                <ant:echo>SQL Parser up-to-date</ant:echo>
            </j:otherwise>
        </j:choose>
        <ant:condition property="xpathparser_stale">
            <ant:not>
                <ant:uptodate targetfile="src/java/org/apache/jackrabbit/core/query/xpath/XPath.java">
                    <ant:srcfiles dir="src/grammar/xpath">
                        <ant:include name="javacc.xsl"/>
                        <ant:include name="jjtree.xsl"/>
                        <ant:include name="jjtree-jackrabbit.xsl"/>
                        <ant:include name="strip.xsl"/>
                        <ant:include name="xpath-grammar.xml"/>
                    </ant:srcfiles>
                </ant:uptodate>
            </ant:not>
        </ant:condition>
        <j:choose>
            <j:when test="${xpathparser_stale == 'true'}">
                <attainGoal name="jackrabbit:generate-xpath-parser"/>
            </j:when>
            <j:otherwise>
                <ant:echo>XPath Parser up-to-date</ant:echo>
            </j:otherwise>
        </j:choose>
    </postGoal>

    <!-- Generates the SQL Parser -->
    <goal name="jackrabbit:generate-sql-parser">
        <ant:java classname="jjtree" fork="true">
            <arg value="-OUTPUT_DIRECTORY=src/java/org/apache/jackrabbit/core/query/sql"/>
            <arg value="src/grammar/sql/JCRSQL.jjt"/>
            <classpath>
                <fileset dir="${maven.repo.local}/javacc/jars">
                    <include name="javacc-3.2.jar"/>
                </fileset>
            </classpath>
        </ant:java>
        <ant:java classname="javacc" fork="true">
            <arg value="-OUTPUT_DIRECTORY=src/java/org/apache/jackrabbit/core/query/sql"/>
            <arg value="src/java/org/apache/jackrabbit/core/query/sql/JCRSQL.jj"/>
            <classpath>
                <fileset dir="${maven.repo.local}/javacc/jars">
                    <include name="javacc-3.2.jar"/>
                </fileset>
            </classpath>
        </ant:java>
    </goal>

    <!-- Generates the XPath Parser -->
    <goal name="jackrabbit:generate-xpath-parser">
        <!-- The following is a hack to get xslt work with maven (See: http://maven.apache.org/faq.html#BadXSLT ) -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <ant:xslt style="src/grammar/xpath/strip.xsl"
            in="src/grammar/xpath/xpath-grammar.xml"
            out="src/grammar/xpath/stripped-xpath-grammar.xml"
            force="yes">
        </ant:xslt>
        <ant:xslt style="src/grammar/xpath/jjtree-jackrabbit.xsl"
            in="src/grammar/xpath/stripped-xpath-grammar.xml"
            out="src/grammar/xpath/XPath.jjt"
            force="yes">
        </ant:xslt>

        <ant:java classname="jjtree" fork="true">
            <arg value="-OUTPUT_DIRECTORY=src/java/org/apache/jackrabbit/core/query/xpath"/>
            <arg value="src/grammar/xpath/XPath.jjt"/>
            <classpath>
                <fileset dir="${maven.repo.local}/javacc/jars">
                    <include name="javacc-3.2.jar"/>
                </fileset>
            </classpath>
        </ant:java>
        <ant:java classname="javacc" fork="true">
            <arg value="-OUTPUT_DIRECTORY=src/java/org/apache/jackrabbit/core/query/xpath"/>
            <arg value="-UNICODE_INPUT=true"/>
            <arg value="src/java/org/apache/jackrabbit/core/query/xpath/XPath.jj"/>
            <classpath>
                <fileset dir="${maven.repo.local}/javacc/jars">
                    <include name="javacc-3.2.jar"/>
                </fileset>
            </classpath>
        </ant:java>
    </goal>

    <!--
        Copies all dependencies to ./target/lib
        (except the optional runtime dependencies cqfs and cqfs-jackrabbit)
    -->
    <goal name="copy-deps">
        <deploy:copy-deps todir="./target/lib" excludes="cqfs,cqfs-jackrabbit"/>
    </goal>

    <!--
        Creates a jar file with the JackrabbitRepositoryStub class which is
        needed for running test cases
    -->
    <goal name="jackrabbit:test-stub">
        <attainGoal name="test:compile"/>
        <ant:jar destfile="./target/jackrabbit-test-stub-${pom.currentVersion}.jar"
            basedir="target/test-classes"
            includes="org/apache/jackrabbit/core/JackrabbitRepositoryStub.class"/>
    </goal>
</project>
