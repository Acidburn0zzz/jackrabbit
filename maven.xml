<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project
    default="jar:install"
    xmlns:deploy="deploy"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven">

    <!-- Add extra files to the source distribution. The Maven dist      -->
    <!-- plugin supports this natively since version 1.7, see MPDIST-15. -->
    <postGoal name="dist:prepare-src-filesystem">
        <ant:copy todir="${maven.dist.src.assembly.dir}">
            <ant:fileset dir="${basedir}">
                <ant:include name="NOTICE.txt"/>
                <ant:include name="HEADER.txt"/>
                <ant:include name="checkstyle.xml"/>
                <ant:include name="checkstyle-suppressions.xml"/>
                <ant:include name="derby.properties"/>
                <ant:include name="modules/commons/project.xml"/>
                <ant:include name="modules/commons/project.properties"/>
                <ant:include name="modules/commons/maven.xml"/>
                <ant:include name="applications/test/jaas.config"/>
                <ant:include name="applications/test/log4j.properties"/>
                <ant:include name="applications/test/repositoryStubImpl.properties"/>
                <ant:include name="applications/test/repository.xml"/>
                <ant:include name="applications/test/repository/namespaces/ns_reg.properties.install"/>
                <ant:include name="applications/test/repository/nodetypes/custom_nodetypes.xml.install"/>
                <ant:include name="applications/test/workspaces/test/workspace.xml"/>
                <ant:include name="applications/test/workspaces/default/workspace.xml"/>
            </ant:fileset>
        </ant:copy>
    </postGoal>

    <!-- Copy the jackrabbit-commons jar to the binary release. -->
    <postGoal name="dist:prepare-bin-filesystem">
        <ant:copy todir="${maven.dist.bin.assembly.dir}">
            <ant:fileset dir="${basedir}/modules/commons/target">
                <ant:include name="*.jar"/>
            </ant:fileset>
        </ant:copy>
    </postGoal>

    <postGoal name="maven-javadoc-plugin:report">
        <attainGoal name="jackrabbit:post-javadoc"/>
    </postGoal>

    <!-- Goal strips the javadov generated datestamp -->
    <goal name="jackrabbit:post-javadoc">
        <ant:replaceregexp
            match="-- Generated by javadoc .*--"
            replace="-- Generated by javadoc --" flags="g" byline="true">
            <ant:fileset dir="${maven.javadoc.destdir}" includes="**/*.html">
                <ant:depth max="20"/>
            </ant:fileset>
        </ant:replaceregexp>
    </goal>

    <!-- Additionally cleans the test data created -->
    <postGoal name="clean">
        <attainGoal name="test:clean"/>
        <attainGoal name="jackrabbit:modules-clean"/>
    </postGoal>

    <!-- deletes the test data -->
    <goal name="test:clean">
        <ant:delete includeEmptyDirs="true">
            <ant:fileset dir="applications/test/repository">
                <ant:include name="**/*"/>
                <ant:exclude name="**/custom_nodetypes.xml.install"/>
                <ant:exclude name="**/ns_reg.properties.install"/>
            </ant:fileset>
        </ant:delete>
        <ant:delete includeEmptyDirs="true">
            <ant:fileset dir="applications/test/workspaces">
                <ant:include name="**/*"/>
                <ant:exclude name="**/workspace.xml"/>
            </ant:fileset>
        </ant:delete>
        <ant:delete dir="applications/test/tx"/>
        <ant:delete dir="applications/test/version"/>
        <ant:delete file="applications/test/.lock"/>
    </goal>

    <!-- Generates the SQL / XPath parsers if necessary -->
    <postGoal name="java:prepare-filesystem">
        <ant:condition property="sqlparser_stale">
            <ant:not>
                <ant:uptodate targetfile="${maven.gen.src}/java/org/apache/jackrabbit/core/query/sql/JCRSQLParser.java">
                    <ant:srcfiles dir="${maven.src.dir}/main/javacc/sql">
                        <ant:include name="JCRSQL.jjt"/>
                    </ant:srcfiles>
                </ant:uptodate>
            </ant:not>
        </ant:condition>
        <j:if test="${sqlparser_stale == 'true'}">
            <attainGoal name="jackrabbit:generate-sql-parser"/>
        </j:if>
        <ant:condition property="xpathparser_stale">
            <ant:not>
                <ant:uptodate targetfile="${maven.gen.src}/java/org/apache/jackrabbit/core/query/xpath/XPath.java">
                    <ant:srcfiles dir="${maven.src.dir}/main/javacc/xpath">
                        <ant:include name="XPath.jjt"/>
                    </ant:srcfiles>
                </ant:uptodate>
            </ant:not>
        </ant:condition>
        <j:if test="${xpathparser_stale == 'true'}">
            <attainGoal name="jackrabbit:generate-xpath-parser"/>
        </j:if>
        <ant:condition property="fulltextparser_stale">
            <ant:not>
                <ant:uptodate targetfile="${maven.gen.src}/java/org/apache/jackrabbit/core/query/lucene/fulltext/QueryParser.java">
                    <ant:srcfiles dir="${maven.src.dir}/main/javacc/fulltext">
                        <ant:include name="QueryParser.jjt"/>
                    </ant:srcfiles>
                </ant:uptodate>
            </ant:not>
        </ant:condition>
        <j:if test="${fulltextparser_stale == 'true'}">
            <attainGoal name="jackrabbit:generate-fulltext-parser"/>
        </j:if>
        <ant:path id="jackrabbit.generated.src"
                  location="${maven.gen.src}/java"/>
        <maven:addPath id="maven.compile.src.set"
                       refid="jackrabbit.generated.src"/>
    </postGoal>

    <!-- Generates the SQL Parser -->
    <goal name="jackrabbit:generate-sql-parser">
        <j:set var="maven.javacc.jjtree.package"
               value="org.apache.jackrabbit.core.query.sql"/>
        <j:set var="maven.javacc.javacc.package"
               value="${maven.javacc.jjtree.package}"/>
        <j:set var="maven.javacc.jjtree.grammar"
               value="${maven.src.dir}/main/javacc/sql/JCRSQL.jjt"/>
        <attainGoal name="javacc"/>
        <!-- Remove files that have been customized in Jackrabbit. -->
        <ant:delete>
          <ant:fileset dir="${maven.gen.src}/java/org/apache/jackrabbit/core/query/sql">
            <ant:include name="ASTLiteral.java"/>
            <ant:include name="ASTContainsExpression.java"/>
            <ant:include name="ASTPredicate.java"/>
            <ant:include name="ASTIdentifier.java"/>
          </ant:fileset>
        </ant:delete>
    </goal>

    <!-- Generates the XPath Parser -->
    <goal name="jackrabbit:generate-xpath-parser">
        <!-- Generate the XPath parser using JavaCC -->
        <j:set var="maven.javacc.jjtree.package"
               value="org.apache.jackrabbit.core.query.xpath"/>
        <j:set var="maven.javacc.javacc.package"
               value="${maven.javacc.jjtree.package}"/>
        <j:set var="maven.javacc.jjtree.grammar"
               value="${maven.src.dir}/main/javacc/xpath/XPath.jjt"/>
        <attainGoal name="javacc"/>
        <!-- Remove files that have been customized in Jackrabbit. -->
        <ant:delete>
          <ant:fileset dir="${maven.gen.src}/java/org/apache/jackrabbit/core/query/xpath">
            <ant:include name="SimpleNode.java"/>
          </ant:fileset>
        </ant:delete>
    </goal>

    <!--
      Generates the XPath parser JJT file. This goal needs to be manually
      invoked to regenerate the XPath.jjt file whenever the XML and XSL
      source files are updated. The resulting file is stored as a normal
      source file instead of automatically generating it to avoid the XSLT
      problems described in JCR-46.
    -->
    <goal name="jackrabbit:generate-xpath-parser-jjt">
        <!-- Generate the JavaCC grammar file using XSLT -->
        <ant:mkdir dir="${maven.gen.src}/javacc"/>
        <!-- The following is a hack to get xslt work with maven (See: http://maven.apache.org/faq.html#BadXSLT ) -->
        ${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
        <ant:xslt style="${maven.src.dir}/main/javacc/xpath/strip.xsl"
            in="${maven.src.dir}/main/javacc/xpath/xpath-grammar.xml"
            out="${maven.gen.src}/javacc/stripped-xpath-grammar.xml"
            force="yes"/>
        <ant:xslt style="${maven.src.dir}/main/javacc/xpath/jjtree-jackrabbit.xsl"
            in="${maven.gen.src}/javacc/stripped-xpath-grammar.xml"
            out="${maven.gen.src}/javacc/XPath.jjt"
            force="yes"/>
    </goal>

    <!-- Generates the fulltext query Parser -->
    <goal name="jackrabbit:generate-fulltext-parser">
        <j:set var="maven.javacc.jjtree.package"
               value="org.apache.jackrabbit.core.query.lucene.fulltext"/>
        <j:set var="maven.javacc.javacc.package"
               value="${maven.javacc.jjtree.package}"/>
        <j:set var="maven.javacc.jjtree.grammar"
               value="${maven.src.dir}/main/javacc/fulltext/QueryParser.jjt"/>
        <attainGoal name="javacc"/>
    </goal>

    <!--
        Copies all dependencies to ./target/lib
    -->
    <goal name="copy-deps">
        <deploy:copy-deps todir="./target/lib"/>
    </goal>

    <!--
        Creates a jar file with the JackrabbitRepositoryStub class which is
        needed for running test cases
    -->
    <goal name="jackrabbit:test-stub">
        <attainGoal name="test:compile"/>
        <ant:jar destfile="./target/jackrabbit-test-stub-${pom.currentVersion}.jar"
            basedir="target/test-classes"
            includes="org/apache/jackrabbit/core/JackrabbitRepositoryStub.class"/>
    </goal>

    <!--
        Run Jackrabbit init tests first.
    -->
    <preGoal name="test:test">
        <j:if test="${context.getVariable('maven.test.skip') != 'true'}">
            <attainGoal name="jackrabbit:test-init"/>
            <attainGoal name="test:single"/>
        </j:if>
    </preGoal>

    <!--
        Runs the init test cases to fill the repository with data for
        read-only tests.
    -->
    <goal name="jackrabbit:test-init">
        <ant:copy file="applications/test/repository/namespaces/ns_reg.properties.install" 
            tofile="applications/test/repository/namespaces/ns_reg.properties"/>
        <ant:copy file="applications/test/repository/nodetypes/custom_nodetypes.xml.install" 
            tofile="applications/test/repository/nodetypes/custom_nodetypes.xml"/>
        <j:set var="testcase" value="org.apache.jackrabbit.init.TestAll"/>
    </goal>

    <postGoal name="jar:jar">
        <attainGoal name="jackrabbit:modules-jar" />
    </postGoal>
    <postGoal name="jar:install">
        <attainGoal name="jackrabbit:modules-install" />
    </postGoal>
    
    <goal name="jackrabbit:modules-jar">
        <maven:reactor 
            basedir="${basedir}/modules"
            includes="*/project.xml"                
            goals="jar:jar"
            banner="Bulding Module"
            ignoreFailures="false"  
        /> 
    </goal>
    
    <goal name="jackrabbit:modules-install">
        <maven:reactor 
            basedir="${basedir}/modules"
            includes="*/project.xml"                
            goals="jar:install"
            banner="Installing Module"
            ignoreFailures="false"  
        /> 
    </goal>
    
    <goal name="jackrabbit:modules-clean">
        <maven:reactor 
            basedir="${basedir}/modules"
            includes="*/project.xml"                
            goals="clean"
            banner="Cleaning Module"
            ignoreFailures="false"  
        /> 
    </goal>


   <postGoal name="xdoc">
       <ant:replaceregexp
           match="&lt;tr class=&quot;[ab]&quot;&gt;"
           replace="&lt;tr&gt;" flags="g" byline="true">
           <ant:fileset dir="${maven.docs.dest}" includes="**/*.html"/>
       </ant:replaceregexp>
   </postGoal>

</project>
